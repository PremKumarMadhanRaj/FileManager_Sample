import { EmitType, INotifyPropertyChanged } from '@syncfusion/ej2-base';
import { SignatureBase, beforeSaveEventArgs } from '../common/signature-base';
import { SignatureModel } from './signature-model';
/**
 * Signature component is a user interface to draw the Signature or Text. It provides supports for various
 * Background color, Stroke color and Background Image.
 * ```html
 * <canvas id="signature"></canvas>
 * ```
 * ```typescript
 * <script>
 *   let signatureObj: Signature = new Signature(null , "#signature");
 * </script>
 * ```
 */
export declare class Signature extends SignatureBase implements INotifyPropertyChanged {
    private dataContext;
    /**
     * Defines the background color.
     *
     * @default '#ffffff'
     */
    backgroundColor: string;
    /**
     * Defines the background image.
     *
     * @default null
     */
    backgroundImage: string;
    /**
     * Defines class/multiple classes separated by a space in the Signature element.
     *
     * @default ''
     */
    cssClass: string;
    /**
     * Enable or disable the Signature, when set to false, interaction with Signature will be prevented.
     *
     * @default false
     */
    disabled: boolean;
    /**
     * Enable or disable the read only of the Signature, when set to false, interaction with Signature will be prevented.
     *
     * @default false
     */
    isReadOnly: boolean;
    /**
     * Enable or disable the background of the Signature when it saves, when set to false, interaction with Signature will be saved without the background.
     *
     * @default true
     */
    saveWithBackground: boolean;
    /**
     * Defines the stroke color.
     *
     * @default '#000000'
     */
    strokeColor: string;
    /**
     * Defines the minimum stroke width for signature.
     *
     * @default 0.5
     */
    minStrokeWidth: number;
    /**
     * Defines the maximum stroke width for signature.
     *
     * @default 2
     */
    maxStrokeWidth: number;
    /**
     * Defines the velocity for signing in the Signature.
     *
     * @default 0.7
     */
    velocity: number;
    /**
     * Enable or disable persisting component's state between page reloads.
     *
     * @default false
     */
    enablePersistence: boolean;
    /**
     * Triggers while saving the signature.
     *
     * @event beforeSave
     */
    beforeSave: EmitType<beforeSaveEventArgs>;
    /**
     * Triggers while changing the signature content.
     *
     * @event change
     */
    change: EmitType<MouseEvent>;
    /**
     * Triggers once the component rendering is completed.
     *
     * @event created
     */
    created: EmitType<MouseEvent>;
    /**
     * Constructor for creating the widget.
     *
     * @param {SignatureModel} options - Specifies the Signature model.
     * @param {string | HTMLFormElement} element - Specifies the element.
     * @private
     */
    constructor(options?: SignatureModel, element?: string | HTMLFormElement);
    protected preRender(): void;
    /**
     * To Initialize the component rendering
     *
     * @private
     * @returns {void}
     */
    protected render(): void;
    initialize(): void;
    /**
     * To get the signature as Base 64.
     *
     * @returns {string}.
     */
    getSignature(): string;
    /**
     * To get component name.
     *
     * @returns {string} - Module Name
     * @private
     */
    protected getModuleName(): string;
    /**
     * To get the properties to be maintained in the persisted state.
     *
     * @returns {string} - Persist data
     */
    protected getPersistData(): string;
    /**
     * Called internally if any of the property value changed.
     *
     * @param  {SignatureModel} newProp - Specifies new properties
     * @param  {SignatureModel} oldProp - Specifies old properties
     * @returns {void}
     * @private
     */
    onPropertyChanged(newProp: SignatureModel, oldProp: SignatureModel): void;
}
