import { Event, EmitType, INotifyPropertyChanged } from '@syncfusion/ej2-base';import { NotifyPropertyChanges, Property, addClass, removeClass } from '@syncfusion/ej2-base';import { SignatureBase, beforeSaveEventArgs } from '../common/signature-base';

/**
 * Interface for a class Signature
 */
export interface SignatureModel {

    /**
     * Defines the background color.
     *
     * @default '#ffffff'
     */
    backgroundColor?: string;

    /**
     * Defines the background image.
     *
     * @default null
     */
    backgroundImage?: string;

    /**
     * Defines class/multiple classes separated by a space in the Signature element.
     *
     * @default ''
     */
    cssClass?: string;

    /**
     * Enable or disable the Signature, when set to false, interaction with Signature will be prevented.
     *
     * @default false
     */
    disabled?: boolean;

    /**
     * Enable or disable the read only of the Signature, when set to false, interaction with Signature will be prevented.
     *
     * @default false
     */
    isReadOnly?: boolean;

    /**
     * Enable or disable the background of the Signature when it saves, when set to false, interaction with Signature will be saved without the background.
     *
     * @default true
     */
    saveWithBackground?: boolean;

    /**
     * Defines the stroke color.
     *
     * @default '#000000'
     */
    strokeColor?: string;

    /**
     * Defines the minimum stroke width for signature.
     *
     * @default 0.5
     */
    minStrokeWidth?: number;

    /**
     * Defines the maximum stroke width for signature.
     *
     * @default 2
     */
    maxStrokeWidth?: number;

    /**
     * Defines the velocity for signing in the Signature.
     *
     * @default 0.7
     */
    velocity?: number;

    /**
     * Enable or disable persisting component's state between page reloads.
     *
     * @default false
     */
    enablePersistence?: boolean;

    /**
     * Triggers while saving the signature.
     *
     * @event beforeSave
     */
    beforeSave?: EmitType<beforeSaveEventArgs>;

    /**
     * Triggers while changing the signature content.
     *
     * @event change
     */
    change?: EmitType<MouseEvent>;

    /**
     * Triggers once the component rendering is completed.
     *
     * @event created
     */
    created?: EmitType<MouseEvent>;

}