import { Component, INotifyPropertyChanged } from '@syncfusion/ej2-base';
import { SignatureModel } from './../signature';
export declare abstract class SignatureBase extends Component<HTMLFormElement> implements INotifyPropertyChanged {
    private clientX;
    private clientY;
    private time;
    private startPoint;
    private controlPoint1;
    private controlPoint2;
    private endPoint;
    private pointColl;
    private canvasContext;
    private lastVelocity;
    private lastWidth;
    private incStep;
    private snapColl;
    private minDistance;
    private previous;
    private interval;
    private timeout;
    private storedArgs;
    private isSignatureEmpty;
    private signatureValue;
    /**
     * Defines the background color.
     *
     */
    backgroundColor: string;
    /**
     * Defines the background image.
     *
     */
    backgroundImage: string;
    /**
     * Enable or disable the Signature, when set to false, interaction with Signature will be prevented.
     *
     */
    disabled: boolean;
    /**
     * Enable or disable the read only of the Signature, when set to false, interaction with Signature will be prevented.
     *
     */
    isReadOnly: boolean;
    /**
     * Enable or disable the background of the Signature when it saves, when set to false, interaction with Signature will be saved without the background.
     *
     */
    saveWithBackground: boolean;
    /**
     * Defines the stroke color.
     *
     */
    strokeColor: string;
    /**
     * Defines the minimum stroke width for signature.
     *
     */
    minStrokeWidth: number;
    /**
     * Defines the maximum stroke width for signature.
     *
     */
    maxStrokeWidth: number;
    /**
     * Defines the velocity for signing in the Signature.
     *
     */
    velocity: number;
    /**
     * To Initialize the component rendering
     *
     * @param {HTMLFormElement} element - Specifies the canvas element.
     * @param {parameter} parameter - Specifies only for the blazor parameter.
     * @returns {void}
     */
    initialize(element: HTMLFormElement, parameter?: parameter): void;
    private setBlazorParameter;
    private wireEvents;
    private unwireEvents;
    private setHTMLProperties;
    private mouseDownHandler;
    private mouseMoveHandler;
    private mouseUpHandler;
    private keyboardHandler;
    private resizeHandler;
    private beginStroke;
    private updateStroke;
    private updateStrokeWithThrottle;
    private delay;
    private createPoint;
    private point;
    private addPoint;
    private startDraw;
    private endDraw;
    private curveDraw;
    private strokeDraw;
    private arcDraw;
    private calculateCurveControlPoints;
    private bezierLengthCalc;
    private bezierPointCalc;
    private pointVelocityCalc;
    private distanceTo;
    private isRead;
    private enableDisable;
    private updateSnapCollection;
    private saveBackground;
    private setBackgroundColor;
    protected loadPersistedSignature(): void;
    /**
     * To get the signature as Blob.
     * @param {string} url - specify the url/base 64 string to get blob of the signature.
     * @returns {Blob}.
     */
    getBlob(url: string): Blob;
    private download;
    /**
     * To refresh the signature.
     *
     * @returns {void}.
     */
    refresh(): void;
    /**
     * To clear the signature.
     *
     * @returns {void}.
     */
    clear(): void;
    /**
     * To undo the last action.
     *
     * @returns {void}.
     */
    undo(): void;
    /**
     * To redo the last action.
     *
     * @returns {void}.
     */
    redo(): void;
    /**
     * To check whether the signature is empty or not.
     *
     * @returns {boolean}.
     */
    isEmpty(): boolean;
    /**
     * To check whether the undo collection is empty or not.
     *
     * @returns {boolean}.
     */
    canUndo(): boolean;
    /**
     * To check whether the redo collection is empty or not.
     *
     * @returns {boolean}.
     */
    canRedo(): boolean;
    /**
     * To draw the signature based on the given text, with the font family and font size.
     *
     * @param {string} text - specify text to be drawn as signature.
     * @param {string} fontFamily - specify font family of a signature.
     * @param {number} fontSize - specify font size of a signature.
     *
     * @returns {void}.
     */
    draw(text: string, fontFamily?: string, fontSize?: number): void;
    /**
     * To get the signature as Base 64.
     *
     * @returns {string}.
     */
    getSignature(): string;
    /**
     * To load the signature with the given base 64 string, height and width.
     *
     * @param {string} signature - specify the url/base 64 string to be drawn as signature.
     * @param {number} width - specify the width of the loaded signature image.
     * @param {number} height - specify the height of the loaded signature image.
     * @returns {void}.
     */
    load(signature: string, width?: number, height?: number): void;
    /**
     * To save the signature with the given type and file name.
     *
     * @param {string} type - specify type of the file to be saved a signature.
     * @param {string} fileName - specify name of the file to be saved a signature.
     *
     * @returns {void}.
     */
    save(type?: string, fileName?: string): void;
    /**
     * To save the signature as Blob.
     *
     * @returns {Blob}.
     */
    saveAsBlob(): Blob;
    /**
     * Get component name.
     *
     * @returns {string} - Module Name
     * @private
     */
    protected getModuleName(): string;
    /**
     * To get the properties to be maintained in the persisted state.
     *
     * @returns {string} - Persist data
     */
    protected getPersistData(): string;
    /**
     * Removes the component from the DOM and detaches all its related event handlers.
     * Also it maintains the initial input element from the DOM.
     *
     * @method destroy
     * @returns {void}
     */
    destroy(): void;
    /**
     * Called internally if any of the property value changed.
     *
     * @param  {SignatureModel} newProp - Specifies new properties
     * @param  {SignatureModel} oldProp - Specifies old properties
     * @returns {void}
     * @private
     */
    onPropertyChanged(newProp: SignatureModel, oldProp: SignatureModel): void;
    /**
     * Modified onPropertyChanged method for both blazor and EJ2 signature component.
     *
     * @param {string} key - Specifies the property, which changed.
     * @param {string} value - Specifies the property value changed.
     * @returns {void}
     */
    propertyChanged(key: string, value: string | boolean): void;
}
/**
 * Interface for before save the canvas as image.
 */
export interface beforeSaveEventArgs {
    /**
     * Specifies the filename of the image.
     */
    fileName?: string;
    /**
     * Specifies the file type 0f the image.
     */
    type?: string;
}
/**
 * Blazor parameter for signature component.
 */
export interface parameter {
    /**
     * Specifies the background color of the signature.
     */
    backgroundColor: string;
    /**
     * Specifies the background image of the signature.
     */
    backgroundImage: string;
    /**
     * Specifies the stroke color of the signature.
     */
    strokeColor: string;
    /**
     * To read only the signature can't draw.
     */
    isReadOnly: boolean;
    /**
     * Specifies the enable/disable of the signature.
     */
    disabled: boolean;
    /**
     * Specifies the signature save with background(color and image).
     */
    saveWithBackground: boolean;
    /**
     * Specifies minimum stroke width to draw signature.
     */
    minStrokeWidth: number;
    /**
     * Specifies maximum stroke width to draw signature.
     */
    maxStrokeWidth: number;
    /**
     * Specifies velocity of the stroke to draw signature.
     */
    velocity: number;
    /**
     * Specifies the last signature url to maintain the persist state.
     */
    signatureValue: string;
}
